{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# A3: NeuralNetwork Class"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Requirements"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this assignment, you will complete the implementation of the `NeuralNetwork` class, based on your solution to `A2` and [08a Optimizers](https://www.cs.colostate.edu/~anderson/cs545/notebooks/08a%20Optimizers.ipynb), using the code included in the next code cell.  Your implementation must meet the requirements described in the doc-strings.\n",
    "\n",
    "Run the code in [08a Optimizers](https://www.cs.colostate.edu/~anderson/cs545/notebooks/08%20Optimizers.ipynb) to create the file `optimizers.py` for use in this assignment.\n",
    "\n",
    "Then apply your `NeuralNetwork` class to the problem of predicting the rental of bicycles in Seoul as described below."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Code for `NeuralNetwork` Class Saved in File `neuralnetworkA3.py`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Writing neuralnetworkA3.py\n"
     ]
    }
   ],
   "source": [
    "%%writefile neuralnetworkA3.py\n",
    "\n",
    "import numpy as np\n",
    "import optimizers as opt\n",
    "\n",
    "\n",
    "class NeuralNetwork():\n",
    "    \"\"\"\n",
    "    A class that represents a neural network for nonlinear regression.\n",
    "    \"\"\"\n",
    "\n",
    "    def __init__(self, n_inputs, n_hiddens_each_layer, n_outputs):\n",
    "        \"\"\"Creates a neural network with the given structure.\"\"\"\n",
    "\n",
    "        self.n_inputs = n_inputs\n",
    "        self.n_hiddens_each_layer = n_hiddens_each_layer\n",
    "        self.n_outputs = n_outputs\n",
    "\n",
    "        # Create list of shapes of weight matrices for each layer\n",
    "        shapes = []\n",
    "        input_size = n_inputs\n",
    "        for n_hidden in n_hiddens_each_layer:\n",
    "            shapes.append((input_size + 1, n_hidden))  # +1 for bias term\n",
    "            input_size = n_hidden\n",
    "        shapes.append((input_size + 1, n_outputs))  # Output layer\n",
    "\n",
    "        # Build one-dimensional vector of all weights and weight matrices\n",
    "        self.all_weights, self.Ws = self._make_weights_and_views(shapes)\n",
    "\n",
    "        # Build gradients similarly\n",
    "        self.all_gradients, self.Grads = self._make_weights_and_views(shapes)\n",
    "\n",
    "        self.X_means = None\n",
    "        self.X_stds = None\n",
    "        self.T_means = None\n",
    "        self.T_stds = None\n",
    "\n",
    "        self.n_epochs = 0\n",
    "        self.error_trace = []\n",
    "\n",
    "    def _make_weights_and_views(self, shapes):\n",
    "        \"\"\"Creates vector of all weights and views for each layer.\"\"\"\n",
    "        # Create one-dimensional numpy array of all weights with random initial values between -1 and 1.\n",
    "        total_weights = sum((rows * cols) for rows, cols in shapes)\n",
    "        all_weights = np.random.uniform(-1, 1, total_weights)\n",
    "\n",
    "        # Build weight matrices as views by reshaping corresponding elements from vector of all weights\n",
    "        Ws = []\n",
    "        start = 0\n",
    "        for rows, cols in shapes:\n",
    "            end = start + rows * cols\n",
    "            W = np.reshape(all_weights[start:end], (rows, cols))\n",
    "            W /= np.sqrt(rows)  # Divide by sqrt of number of inputs\n",
    "            Ws.append(W)\n",
    "            start = end\n",
    "\n",
    "        return all_weights, Ws\n",
    "\n",
    "    def __repr__(self):\n",
    "        return f'NeuralNetwork({self.n_inputs}, {self.n_hiddens_each_layer}, {self.n_outputs})'\n",
    "\n",
    "    def __str__(self):\n",
    "        if self.n_epochs > 0:\n",
    "            return f'{self.__repr__()} trained for {self.n_epochs} epochs with a final RMSE of {self.error_trace[-1]}'\n",
    "        else:\n",
    "            return f'{self.__repr__()} has not been trained.'\n",
    "\n",
    "    def train(self, Xtrain, Ttrain, Xvalidate, Tvalidate, n_epochs, batch_size=-1,\n",
    "              method='sgd', learning_rate=None, momentum=0, weight_penalty=0, verbose=True):\n",
    "        \"\"\"Updates the weights.\"\"\"\n",
    "        \n",
    "        self.batch_size = batch_size\n",
    "        \n",
    "        # Standardize Xtrain, Ttrain, Xvalidate and Tvalidate\n",
    "        self.X_means = Xtrain.mean(axis=0)\n",
    "        self.X_stds = Xtrain.std(axis=0)\n",
    "        Xtrain_standardized = (Xtrain - self.X_means) / self.X_stds\n",
    "        Xvalidate_standardized = (Xvalidate - self.X_means) / self.X_stds\n",
    "        \n",
    "        self.T_means = Ttrain.mean(axis=0)\n",
    "        self.T_stds = Ttrain.std(axis=0)\n",
    "        Ttrain_standardized = (Ttrain - self.T_means) / self.T_stds\n",
    "        Tvalidate_standardized = (Tvalidate - self.T_means) / self.T_stds\n",
    "\n",
    "        # Instantiate Optimizers object by giving it vector of all weights\n",
    "        optimizer = opt.Optimizers(self.all_weights)\n",
    "\n",
    "        # Select optimization method\n",
    "        if method == 'sgd':\n",
    "            self.error_trace = optimizer.sgd(Xtrain_standardized, Ttrain_standardized,\n",
    "                                             Xvalidate_standardized, Tvalidate_standardized,\n",
    "                                             self.error_f, self.gradient_f,\n",
    "                                             n_epochs=n_epochs, batch_size=batch_size,\n",
    "                                             learning_rate=learning_rate,\n",
    "                                             momentum=momentum, weight_penalty=weight_penalty,\n",
    "                                             verbose=verbose)\n",
    "\n",
    "        elif method == 'adam':\n",
    "            self.error_trace = optimizer.adam(Xtrain_standardized, Ttrain_standardized,\n",
    "                                              Xvalidate_standardized, Tvalidate_standardized,\n",
    "                                              self.error_f, self.gradient_f,\n",
    "                                              n_epochs=n_epochs, batch_size=batch_size,\n",
    "                                              learning_rate=learning_rate,\n",
    "                                              weight_penalty=weight_penalty, verbose=verbose)\n",
    "\n",
    "        elif method == 'scg':\n",
    "            self.error_trace = optimizer.scg(Xtrain_standardized, Ttrain_standardized,\n",
    "                                             Xvalidate_standardized, Tvalidate_standardized,\n",
    "                                             self.error_f, self.gradient_f,\n",
    "                                             n_epochs=n_epochs, batch_size=batch_size,\n",
    "                                             weight_penalty=weight_penalty, verbose=verbose)\n",
    "\n",
    "        else:\n",
    "            raise Exception(\"Method must be 'sgd', 'adam', or 'scg'\")\n",
    "\n",
    "        self.n_epochs += len(self.error_trace)\n",
    "        self.best_epoch = optimizer.best_epoch\n",
    "\n",
    "        return self\n",
    "\n",
    "    def _add_ones(self, X):\n",
    "        return np.insert(X, 0, 1, axis=1)\n",
    "\n",
    "    def _forward(self, X):\n",
    "        \"\"\"Calculate outputs of each layer given inputs in X.\"\"\"\n",
    "        self.Zs = [self._add_ones(X)]\n",
    "        for W in self.Ws[:-1]:\n",
    "            Z = np.tanh(self.Zs[-1] @ W)\n",
    "            self.Zs.append(self._add_ones(Z))\n",
    "        self.Zs.append(self.Zs[-1] @ self.Ws[-1])\n",
    "        return self.Zs\n",
    "\n",
    "    def error_f(self, X, T):\n",
    "        \"\"\"Calculate mean squared error.\"\"\"\n",
    "        Y = self._forward(X)[-1]\n",
    "        return np.mean((T - Y) ** 2)\n",
    "\n",
    "    def gradient_f(self, X, T):\n",
    "        \"\"\"Return gradients with respect to all weights.\"\"\"\n",
    "        n_samples = X.shape[0]\n",
    "        delta = -(T - self.Zs[-1]) / n_samples\n",
    "\n",
    "        for layeri in range(len(self.Ws) - 1, -1, -1):\n",
    "            self.Grads[layeri][:] = self.Zs[layeri].T @ delta\n",
    "            if layeri > 0:\n",
    "                delta = (delta @ self.Ws[layeri].T)[:, 1:] * (1 - self.Zs[layeri][:, 1:] ** 2)\n",
    "                \n",
    "        return self.all_gradients\n",
    "\n",
    "    def use(self, X):\n",
    "        \"\"\"Return the output of the network for input samples.\"\"\"\n",
    "        X_standardized = (X - self.X_means) / self.X_stds\n",
    "        Y = self._forward(X_standardized)[-1]\n",
    "        return Y * self.T_stds + self.T_means\n",
    "\n",
    "    def get_error_trace(self):\n",
    "        \"\"\"Returns list of root-mean square error for each epoch.\"\"\"\n",
    "        return self.error_trace\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Example Results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here we test the `NeuralNetwork` class with some simple data.  \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-10-04T16:45:19.796891Z",
     "start_time": "2022-10-04T16:45:19.792940Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The autoreload extension is already loaded. To reload it, use:\n",
      "  %reload_ext autoreload\n"
     ]
    }
   ],
   "source": [
    "%load_ext autoreload\n",
    "%autoreload 2\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import neuralnetworkA3 as nn  # Your file produced from the above code cell."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-10-04T16:45:20.543559Z",
     "start_time": "2022-10-04T16:45:20.505942Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SGD: Epoch 1 MSE=1.00008,1.00008\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[array([[-1.51603124e-07,  9.99801782e-04],\n",
       "        [ 2.00719909e-03,  3.00940664e-03]]),\n",
       " array([[0.00398889, 0.00498788],\n",
       "        [0.00600106, 0.00700115],\n",
       "        [0.00800157, 0.00900172]]),\n",
       " array([[0.00898958],\n",
       "        [0.01099768],\n",
       "        [0.01199691]])]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = np.arange(0, 2, 0.5).reshape(-1, 1)\n",
    "T = np.sin(X) * np.sin(X * 10)\n",
    "\n",
    "nnet = nn.NeuralNetwork(X.shape[1], [2, 2], 1)\n",
    "    \n",
    "# Set all weights here to allow comparison of your calculations\n",
    "# Must use [:] to overwrite values in all_weights.\n",
    "# Without [:], new array is assigned to self.all_weights, so self.Ws no longer refer to same memory\n",
    "nnet.all_weights[:] = np.arange(len(nnet.all_weights)) * 0.001\n",
    "\n",
    "nnet.train(X, T, X, T, n_epochs=1, batch_size=-1, method='sgd', learning_rate=0.1)\n",
    "\n",
    "nnet.Ws"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-10-04T16:45:21.218607Z",
     "start_time": "2022-10-04T16:45:21.213431Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[array([[ 1.        , -1.34164079],\n",
       "        [ 1.        , -0.4472136 ],\n",
       "        [ 1.        ,  0.4472136 ],\n",
       "        [ 1.        ,  1.34164079]]),\n",
       " array([[ 1.00000000e+00, -2.69308526e-03, -3.03773156e-03],\n",
       "        [ 1.00000000e+00, -8.97798084e-04, -3.46045767e-04],\n",
       "        [ 1.00000000e+00,  8.97494878e-04,  2.34564504e-03],\n",
       "        [ 1.00000000e+00,  2.69278206e-03,  5.03730187e-03]]),\n",
       " array([[1.        , 0.0039484 , 0.00494164],\n",
       "        [1.        , 0.00398071, 0.00497843],\n",
       "        [1.        , 0.00401302, 0.00501523],\n",
       "        [1.        , 0.00404533, 0.00505203]]),\n",
       " array([[0.00909229],\n",
       "        [0.00909308],\n",
       "        [0.00909388],\n",
       "        [0.00909468]])]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nnet.Zs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-10-04T16:45:21.777963Z",
     "start_time": "2022-10-04T16:45:21.773479Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[array([[ 1.51603124e-06,  1.98217653e-06],\n",
       "        [-7.19909102e-05, -9.40663907e-05]]),\n",
       " array([[ 1.11145896e-04,  1.21249680e-04],\n",
       "        [-1.05587719e-05, -1.15185542e-05],\n",
       "        [-1.57268813e-05, -1.71564392e-05]]),\n",
       " array([[1.01041953e-02],\n",
       "        [2.32194989e-05],\n",
       "        [3.09340617e-05]])]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nnet.Grads"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-10-04T16:45:22.129760Z",
     "start_time": "2022-10-04T16:45:22.125177Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-0.06308723],\n",
       "       [-0.06308687],\n",
       "       [-0.06308651],\n",
       "       [-0.06308615]])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y = nnet.use(X)\n",
    "Y"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## More Detailed Example Use"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "Xtrain = np.arange(-2, 2, 0.05).reshape(-1, 1)\n",
    "Ttrain = np.sin(Xtrain) * np.sin(Xtrain * 5)\n",
    "    \n",
    "Xval = Xtrain * 1.1  \n",
    "Tval = Ttrain + 0.2 * Xtrain\n",
    "Xtest = Xtrain * 0.97\n",
    "Ttest = Ttrain + 0.15 * Xtrain # + np.random.uniform(-0.05, 0.05, Ttrain.shape) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "errors = []\n",
    "Ytests = []\n",
    "n_epochs = 4000\n",
    "method_rhos = [('sgd', 0.05),\n",
    "               ('adamw', 0.005),\n",
    "               ('scg', None)] "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SGD: Epoch 400 MSE=0.88142,1.05762\n",
      "SGD: Epoch 800 MSE=0.16605,0.60035\n",
      "SGD: Epoch 1200 MSE=0.05000,0.67452\n",
      "SGD: Epoch 1600 MSE=0.02011,0.69130\n",
      "SGD: Epoch 2000 MSE=0.00745,0.68737\n",
      "SGD: Epoch 2400 MSE=0.00538,0.67984\n",
      "SGD: Epoch 2800 MSE=0.00408,0.67743\n",
      "SGD: Epoch 3200 MSE=0.00308,0.67889\n",
      "SGD: Epoch 3600 MSE=0.00230,0.68161\n",
      "SGD: Epoch 4000 MSE=0.00174,0.68458\n",
      "AdamW: Epoch 400 MSE=0.02240,0.69452\n",
      "AdamW: Epoch 800 MSE=0.01500,0.72812\n",
      "AdamW: Epoch 1200 MSE=0.00082,0.72829\n",
      "AdamW: Epoch 1600 MSE=0.00022,0.73659\n",
      "AdamW: Epoch 2000 MSE=0.00016,0.73690\n",
      "AdamW: Epoch 2400 MSE=0.00010,0.73939\n",
      "AdamW: Epoch 2800 MSE=0.00008,0.73959\n",
      "AdamW: Epoch 3200 MSE=0.00006,0.73808\n",
      "AdamW: Epoch 3600 MSE=0.00005,0.73775\n",
      "AdamW: Epoch 4000 MSE=0.00004,0.73847\n",
      "SCG: Epoch 0 MSE=1.01037,1.32067\n",
      "SCG: Epoch 400 MSE=0.00023,0.81317\n",
      "SCG: Epoch 800 MSE=0.00001,0.75998\n",
      "SCG: Epoch 1200 MSE=0.00000,0.75285\n",
      "SCG: Epoch 1600 MSE=0.00000,0.75314\n",
      "SCG: Epoch 2000 MSE=0.00000,0.75426\n",
      "SCG: Epoch 2400 MSE=0.00000,0.75446\n",
      "SCG: Epoch 2800 MSE=0.00000,0.75401\n",
      "SCG: Epoch 3200 MSE=0.00000,0.75324\n",
      "SCG: Epoch 3600 MSE=0.00000,0.75347\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "for method, rho in method_rhos:\n",
    "    nnet = nn.NeuralNetwork(Xtrain.shape[1], [10, 10], 1)\n",
    "    nnet.train(Xtrain, Ttrain, Xval, Tval, n_epochs, batch_size=-1, method=method, learning_rate=rho,\n",
    "               momentum=0.9)  # momentum only affects sgd)\n",
    "    Ytrain = nnet.use(Xtrain)\n",
    "    plt.plot(Xtrain, Ytrain, '-', label=method + ' Ytrain')\n",
    "    errors.append(nnet.get_error_trace())\n",
    "    Ytests.append(nnet.use(Xtest))\n",
    "\n",
    "plt.plot(Xtrain, Ttrain, 'o', label='Train')\n",
    "plt.xlabel('X')\n",
    "plt.ylabel('T or Y')\n",
    "plt.legend()\n",
    "plt.tight_layout()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "errors = np.stack(errors)\n",
    "# errors is now 3 x n_epochs x 2\n",
    "colors = ['b', 'r', 'g']\n",
    "styles = ['-', '--']\n",
    "for methodi, method in enumerate([mr[0] for mr in method_rhos]):\n",
    "    for train_val_i, train_val in enumerate(['Train', 'Validate']):\n",
    "        plt.plot(errors[methodi, :, train_val_i], f'{colors[methodi]}{styles[train_val_i]}',\n",
    "                 label=f'{method} {train_val}')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Standardized error')\n",
    "plt.legend()\n",
    "plt.tight_layout()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_Y_vs_T(Y, T, title):\n",
    "    plt.plot(T, Y, 'o', alpha=0.6)\n",
    "    a = min(min(T), min(Y))[0]\n",
    "    b = max(max(T), max(Y))[0]\n",
    "    plt.axline((a, a), (b, b), linewidth=4, color='r', alpha=0.5)\n",
    "    plt.xlabel('T')\n",
    "    plt.ylabel('Y')\n",
    "    plt.title(title)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10, 5))\n",
    "for i in range(3):\n",
    "    plt.subplot(1, 3, i+1)\n",
    "    plot_Y_vs_T(Ytests[i], Ttest, f'{method_rhos[i][0]} Test Data')\n",
    "plt.tight_layout()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Application"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Use your neural network implementation to create a model for predicting the [critical temperature](https://www.energy.gov/science/doe-explainssuperconductivity) of superconductive materials based on attributes of the materials.  Download and extract the data from [this UCI ML Repository site](https://archive.ics.uci.edu/dataset/464/superconductivty+data).  This site explains the data and has a link to an introductory paper.  The data consists of 81 attributes extracted from 21,263 superconductors in the first 81 columns and the critical temperature for each in the 82nd column.  So, the first 81 columns will form your input $X$ matrix and the last column will be your target $T$ matrix."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. Your task is to do the following. Partition the data into partitions of 60%, 20% and 20% for the training, validation and test sets, respectively. Try training with each of the three optimization methods and reasonable values for the other parameters. Plot the `error_trace`s for example runs of each of three methods.  <font color=red>Discuss what you see in the plots.</font>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2. Write code using nested for loops to iterate over all three optimization methods, several hidden layer structures, several numbers of epochs, several learning rates, and several batch sizes.  In a list of lists, collect the method, number of epochs, learning rate, batch size, and RMSEs for training, validation, and test data. After all for loops have completed, convert the resulting list of lists into a `pandas.DataFrame` with appropriate column names. Sort it by ascending test set RMSEs and print the `DataFrame`.  It may be helpful to also do this for each iteration of the outer-most for loop.  You should set `verbose=False` in the call to `NeuralNetwork.train` to reduce the amount of printing.\n",
    "<font color=red>Discuss the set of parameter values and all three RMSE values that produce some of the lowest test RMSEs.  </font>\n",
    "To debug this code, use very small numbers of epochs."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3. Train another network using the best parameter values shown in your results.  In three separate plots, plot the predicted critical temperature versus the actual (target) critical temperatures for the training, validation, and test sets.  <font color=red>Discuss what you see. How well does your neural network predict the critical temperatures?</font>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Grading\n",
    "\n",
    "Your notebook will be run and graded automatically. Test this grading process by first downloading [A3grader.zip](http://www.cs.colostate.edu/~anderson/cs545/notebooks/A3grader.zip) and extract `A3grader.py` from it. Run the code in the following cell to demonstrate an example grading session. As always, a different, but similar, grading script will be used to grade your checked-in notebook. It will include additional tests. You should design and perform additional tests on all of your functions to be sure they run correctly before checking in your notebook.  \n",
    "\n",
    "For the grading script to run correctly, you must first name this notebook as 'A3solution.ipynb' (lower case s) and then save this notebook. Check in your notebook in Canvas.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-10-04T16:48:25.413736Z",
     "start_time": "2022-10-04T16:47:53.770010Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "======================= Code Execution =======================\n",
      "\n",
      "Extracting python code from notebook named 'A3solution.ipynb' and storing in notebookcode.py\n",
      "Removing all statements that are not function or class defs or import statements.\n",
      "\n",
      "\n",
      "================================================================================ \n",
      "Testing this for 5 points:\n",
      "\n",
      "def check_weight_views(nnet):\n",
      "    results = []\n",
      "    for layeri, W in enumerate(nnet.Ws):\n",
      "        if np.shares_memory(nnet.all_weights, W):\n",
      "            print(f'nnet.Ws[{layeri}] correctly shares memory with nnet.all_weights')\n",
      "            results.append(True)\n",
      "        else:\n",
      "            print(f'nnet.Ws[{layeri}] does not correctly share memory with nnet.all_weights')\n",
      "            results.append(False)\n",
      "\n",
      "    return np.all(results)\n",
      "\n",
      "n_inputs = 3\n",
      "n_hiddens = [12, 8, 4]\n",
      "n_outputs = 2\n",
      "\n",
      "nnet = nn.NeuralNetwork(n_inputs, n_hiddens, n_outputs)\n",
      "\n",
      "\n",
      "#  and test result with    check_weight_views(nnet)\n",
      "\n",
      "----------------------------------------------------------------------\n",
      "----  5/5 points. Weight views are correctly defined\n",
      "----------------------------------------------------------------------\n",
      "\n",
      "\n",
      "================================================================================ \n",
      "Testing this for 5 points:\n",
      "\n",
      "nnet = nn.NeuralNetwork(3, [], 4)\n",
      "\n",
      "\n",
      "#  and test result with    check_weight_views(nnet)\n",
      "\n",
      "----------------------------------------------------------------------\n",
      "----  5/5 points. Weight views are correctly defined\n",
      "----------------------------------------------------------------------\n",
      "\n",
      "\n",
      "================================================================================ \n",
      "Testing this for 5 points:\n",
      "\n",
      "def check_gradient_views(nnet):\n",
      "    results = []\n",
      "    for layeri, G in enumerate(nnet.Grads):\n",
      "        if np.shares_memory(nnet.all_gradients, G):\n",
      "            print(f'nnet.Grads[{layeri}] correctly shares memory with nnet.all_gradients')\n",
      "            results.append(True)\n",
      "        else:\n",
      "            print(f'nnet.Grads[{layeri}] does not correctly share memory with nnet.all_gradients')\n",
      "            results.append(False)\n",
      "\n",
      "    return np.all(results)\n",
      "\n",
      "n_inputs = 3\n",
      "n_hiddens = [5, 10, 20]\n",
      "n_outputs = 2\n",
      "\n",
      "nnet = nn.NeuralNetwork(n_inputs, n_hiddens, n_outputs)\n",
      "\n",
      "\n",
      "#  and test result with    check_gradient_views(nnet)\n",
      "\n",
      "----------------------------------------------------------------------\n",
      "----  5/5 points. Gradient views are correctly defined\n",
      "----------------------------------------------------------------------\n",
      "\n",
      "\n",
      "================================================================================ \n",
      "Testing this for 15 points:\n",
      "\n",
      "n_inputs = 3\n",
      "n_hiddens = [5, 10, 20]\n",
      "n_outputs = 2\n",
      "n_samples = 10\n",
      "\n",
      "X = np.arange(n_samples * n_inputs).reshape(n_samples, n_inputs) * 0.1\n",
      "    \n",
      "nnet = nn.NeuralNetwork(n_inputs, n_hiddens, n_outputs)\n",
      "nnet.all_weights[:] = 0.1  # set all weights to 0.1\n",
      "nnet.X_means = np.mean(X, axis=0)\n",
      "nnet.X_stds = np.std(X, axis=0)\n",
      "nnet.T_means = np.zeros((n_samples, n_outputs))\n",
      "nnet.T_stds = np.ones((n_samples, n_outputs))\n",
      "    \n",
      "Y = nnet.use(X)\n",
      "\n",
      "Y_answer = np.array([[0.14629519, 0.14629519],\n",
      "                     [0.24029528, 0.24029528],\n",
      "                     [0.33910878, 0.33910878],\n",
      "                     [0.43981761, 0.43981761],\n",
      "                     [0.53920896, 0.53920896],\n",
      "                     [0.63421852, 0.63421852],\n",
      "                     [0.72233693, 0.72233693],\n",
      "                     [0.80186297, 0.80186297],\n",
      "                     [0.87195874, 0.87195874],\n",
      "                     [0.93254   , 0.93254   ]])\n",
      "\n",
      "\n",
      "#  and test result with    np.allclose(Y, Y_answer, 0.1)\n",
      "\n",
      "----------------------------------------------------------------------\n",
      "----  15/15 points. nnet.use returned correct values.\n",
      "----------------------------------------------------------------------\n",
      "\n",
      "\n",
      "================================================================================ \n",
      "Testing this for 20 points:\n",
      "\n",
      "n_inputs = 3\n",
      "n_hiddens = [6, 3]\n",
      "n_samples = 5\n",
      "\n",
      "X = np.arange(n_samples * n_inputs).reshape(n_samples, n_inputs) * 0.1\n",
      "T = np.log(X + 0.1)\n",
      "n_outputs = T.shape[1]\n",
      "\n",
      "def rmse(A, B):\n",
      "    return np.sqrt(np.mean((A - B)**2))\n",
      "\n",
      "results = []\n",
      "for rep in range(20):\n",
      "    nnet = nn.NeuralNetwork(n_inputs, n_hiddens, n_outputs)\n",
      "    nnet.train(X, T, X, T, 2000, batch_size=-1, method='adamw', learning_rate=0.001, verbose=False)\n",
      "    Y = nnet.use(X)\n",
      "    err = rmse(Y, T)\n",
      "    print(f'Net {rep+1} RMSE {err:.5f}')\n",
      "    results.append(err)\n",
      "\n",
      "mean_rmse = np.mean(results)\n",
      "print(mean_rmse)\n",
      "\n",
      "Net 1 RMSE 0.01317\n",
      "Net 2 RMSE 0.00885\n",
      "Net 3 RMSE 0.01277\n",
      "Net 4 RMSE 0.01115\n",
      "Net 5 RMSE 0.01299\n",
      "Net 6 RMSE 0.00767\n",
      "Net 7 RMSE 0.01423\n",
      "Net 8 RMSE 0.01402\n",
      "Net 9 RMSE 0.01332\n",
      "Net 10 RMSE 0.01348\n",
      "Net 11 RMSE 0.00780\n",
      "Net 12 RMSE 0.00789\n",
      "Net 13 RMSE 0.01483\n",
      "Net 14 RMSE 0.01425\n",
      "Net 15 RMSE 0.01416\n",
      "Net 16 RMSE 0.01335\n",
      "Net 17 RMSE 0.01247\n",
      "Net 18 RMSE 0.01310\n",
      "Net 19 RMSE 0.01351\n",
      "Net 20 RMSE 0.01499\n",
      "0.012401367053791534\n",
      "\n",
      "#  and test result with    0.0 < mean_rmse < 0.1\n",
      "\n",
      "----------------------------------------------------------------------\n",
      "----  20/20 points. mean_rmse is correct value.\n",
      "----------------------------------------------------------------------\n",
      "\n",
      "\n",
      "================================================================================ \n",
      "Testing this for 20 points:\n",
      "\n",
      "n_inputs = 3\n",
      "n_hiddens = [10, 10, 5]\n",
      "n_samples = 5\n",
      "\n",
      "X = np.arange(n_samples * n_inputs).reshape(n_samples, n_inputs) * 0.1\n",
      "T = 2 + np.log(X + 0.1)\n",
      "Xval = X + np.random.normal(0.0, 0.1, size=X.shape)\n",
      "Tval = 2.1 + np.log(Xval + 0.1)\n",
      "n_outputs = T.shape[1]\n",
      "    \n",
      "def rmse(A, B):\n",
      "    return np.sqrt(np.mean((A - B)**2))\n",
      "\n",
      "results = []\n",
      "for rep in range(20):\n",
      "    nnet = nn.NeuralNetwork(n_inputs, n_hiddens, n_outputs)\n",
      "    nnet.train(X, T, Xval, Tval, 3000, batch_size=-1, method='adamw', learning_rate=0.1, verbose=False)\n",
      "    Y = nnet.use(X)\n",
      "    err = rmse(Y, T)\n",
      "    print(f'Net {rep+1} RMSE {err:.5f} best epoch {nnet.best_epoch}')\n",
      "    results.append(err)\n",
      "\n",
      "mean_rmse = np.mean(results)\n",
      "print(mean_rmse)\n",
      "\n",
      "Net 1 RMSE 0.10264 best epoch 42\n",
      "Net 2 RMSE 0.10706 best epoch 32\n",
      "Net 3 RMSE 0.07375 best epoch 1847\n",
      "Net 4 RMSE 0.15587 best epoch 26\n",
      "Net 5 RMSE 0.10362 best epoch 34\n",
      "Net 6 RMSE 0.06920 best epoch 2453\n",
      "Net 7 RMSE 0.09906 best epoch 526\n",
      "Net 8 RMSE 0.11209 best epoch 25\n",
      "Net 9 RMSE 0.07596 best epoch 20\n",
      "Net 10 RMSE 0.11298 best epoch 275\n",
      "Net 11 RMSE 0.03252 best epoch 1902\n",
      "Net 12 RMSE 0.11016 best epoch 815\n",
      "Net 13 RMSE 0.07999 best epoch 34\n",
      "Net 14 RMSE 0.06414 best epoch 1065\n",
      "Net 15 RMSE 0.14334 best epoch 23\n",
      "Net 16 RMSE 0.07890 best epoch 46\n",
      "Net 17 RMSE 0.10997 best epoch 20\n",
      "Net 18 RMSE 0.08706 best epoch 25\n",
      "Net 19 RMSE 0.12045 best epoch 30\n",
      "Net 20 RMSE 0.12027 best epoch 22\n",
      "0.09795178394637534\n",
      "\n",
      "#  and test result with    0.005 < mean_rmse < 0.2\n",
      "\n",
      "----------------------------------------------------------------------\n",
      "----  20/20 points. mean_rmse returned correct value.\n",
      "----------------------------------------------------------------------\n",
      "\n",
      "======================================================================\n",
      "A3 Execution Grade is 70 / 70\n",
      "\n",
      " REMEMBER, YOUR FINAL EXECUTION GRADE MAY BE DIFFERENT,\n",
      " BECAUSE DIFFERENT TESTS WILL BE RUN.\n",
      "======================================================================\n",
      "\n",
      "Application Results:\n",
      "\n",
      "___ / 10  1. Train with each of the three optimization, plot the error_traces for each\n",
      "             of the three methods.  Discussion of what you see in the plots.\n",
      "___ / 10  2. Use nested for loops to test various parameter values. Collect results in a\n",
      "             DataFrame. Discussion of the set of parameter values and all three RMSE values\n",
      "             that produce some of the lowest test RMSEs\n",
      "___ / 10  3. Using best parameter values found, plot predicted critical temperature versus \n",
      "             the actual (target) critical temperatures for the training, validation, and test sets.\n",
      "             Discuss what you see. How well does your neural network predict the critical temperatures?\n",
      "\n",
      "======================================================================\n",
      "A3 Experiments and Discussion Grade is __ / 30\n",
      "======================================================================\n",
      "\n",
      "======================================================================\n",
      "A3 FINAL GRADE is  _  / 100\n",
      "======================================================================\n",
      "\n",
      "Extra Credit:  Code and discussion showing most significant input features, and results after removing half of the least significant features.\n",
      "\n",
      "\n",
      "A3 EXTRA CREDIT is 0 / 1\n"
     ]
    }
   ],
   "source": [
    "%run -i A3grader.py"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Extra Credit\n",
    "\n",
    "Using a network that gives you pretty good test RMSE results, try to figure out which input features are most significant in predicting the critical temperature.  Remember, that our neural networks are trained with standardized inputs, so you can compare the magnitudes of weights in the first layer to help you determine which inputs are most significant. \n",
    "\n",
    "To visualize the weights, try displaying the weights in the first layer as an image, with `plt.imshow` with `plt.colorbar()`. Discuss which weights have the largest magnitudes and discuss any patterns you see in the weights in each hidden unit of the first layer.\n",
    "\n",
    "Retrain your neural network after removing half of the inputs for which the first layer of your network has the lowest mean absolute weights.  Discuss how this affects the three RMSE values."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.5"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": false,
   "sideBar": true,
   "skip_h1_title": true,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": true,
   "toc_position": {
    "height": "calc(100% - 180px)",
    "left": "10px",
    "top": "150px",
    "width": "512px"
   },
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
